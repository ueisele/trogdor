/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


import org.gradle.api.tasks.bundling.Compression

import org.eclipse.jgit.api.Git
import org.eclipse.jgit.storage.file.FileRepositoryBuilder

import java.nio.charset.StandardCharsets

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.eclipse.jgit:org.eclipse.jgit:5.3.1.201904271842-r"
    }
}

apply from: "$rootDir/dependencies.gradle"

allprojects {
    
    apply plugin: 'base'
    apply plugin: 'idea'

    group 'net.uweeisele.trogdor'
    version = Git.open(new FileRepositoryBuilder().findGitDir(project.rootDir).getGitDir()).describe().setTags(true).call()
    
    repositories {
        mavenCentral()
        maven {
            url 'http://packages.confluent.io/maven/'
        }
    }

    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java
        // noinspection SpellCheckingInspection
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

ext {
    gradleVersion = "5.4.1"
    minJavaVersion = "11"

    userMaxForks = project.hasProperty('maxParallelForks') ? maxParallelForks.toInteger() : null
    
    mavenUrl = project.hasProperty('mavenUrl') ? project.mavenUrl : "file://${buildDir}/mvn-repo"
    mavenUsername = project.hasProperty('mavenUsername') ? project.mavenUsername : ''
    mavenPassword = project.hasProperty('mavenPassword') ? project.mavenPassword : ''
}

apply from: file('wrapper.gradle')

task dist(type: Copy) {
    subprojects.each { 
        duplicatesStrategy 'exclude'

        dependsOn("${it.name}:jar") 
        from (it.tasks.matching { it.name == 'jar' }) {
            into "libs"
        }
        from (it.tasks.matching { it.name == 'copyDependantLibs' }) {
            into "libs"
        }
        
        from ("$projectDir/src/main/bash") {
            into "bin"
        }

        from ("$projectDir/src/main/config") {
            into "config"
        }

        destinationDir file("$buildDir/dist")
    }
}

task distTar(type: Tar, dependsOn: dist) {
    archiveClassifier = 'dist'
    compression = Compression.GZIP
    from tasks.matching { it.name == 'dist' }
    into "$baseName"
    destinationDir file("$buildDir/distTar")
}

subprojects {
    
    apply plugin: 'java-library'
    apply plugin: 'maven'

    sourceCompatibility = minJavaVersion
    targetCompatibility = minJavaVersion

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    dependencies {
        testCompile libs.junit
    }

    task copyDependantLibs(type: Copy) {
        from (configurations.testRuntimeClasspath) {
            include('slf4j-log4j12*')
            include('log4j*jar')
        }
        from (configurations.runtimeClasspath)
        into "$buildDir/dependant-libs"
        duplicatesStrategy 'exclude'
    }

    jar {
        dependsOn 'copyDependantLibs'
        from "$rootDir/LICENSE"
        from "$rootDir/NOTICE"
    }

    jar.manifest {
        attributes(
                'Version': "${version}"
        )
    }

    task srcJar(type: Jar) {
        archiveClassifier.set('sources')
        from "$rootDir/LICENSE"
        from "$rootDir/NOTICE"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        from "$rootDir/LICENSE"
        from "$rootDir/NOTICE"
        from javadoc.destinationDir
    }

    task docsJar(dependsOn: javadocJar)

    javadoc {
        options.charSet = 'UTF-8'
        options.docEncoding = 'UTF-8'
        options.encoding = 'UTF-8'
    }

    artifacts {
        archives srcJar
        archives javadocJar
    }

    if(!sourceSets.test.allSource.isEmpty()) {
        task testJar(type: Jar) {
            archiveClassifier.set('test')
            from "$rootDir/LICENSE"
            from "$rootDir/NOTICE"
            from sourceSets.test.output
        }

        task testSrcJar(type: Jar, dependsOn: testJar) {
            archiveClassifier.set('test-sources')
            from "$rootDir/LICENSE"
            from "$rootDir/NOTICE"
            from sourceSets.test.allSource
        }

        artifacts {
            archives testJar
            archives testSrcJar
        }
    }       

    def testLoggingEvents = ["passed", "skipped", "failed"]
    def testShowStandardStreams = false
    def testExceptionFormat = 'full'
    // Gradle built-in logging only supports sending test output to stdout, which generates a lot
    // of noise, especially for passing tests. We really only want output for failed tests. This
    // hooks into the output and logs it (so we don't have to buffer it all in memory) and only
    // saves the output for failing tests. Directory and filenames are such that you can, e.g.,
    // create a Jenkins rule to collect failed test output.
    def logTestStdout = {
        def testId = { TestDescriptor descriptor ->
            "${descriptor.className}.${descriptor.name}".toString()
        }

        def logFiles = new HashMap<String, File>()
        def logStreams = new HashMap<String, FileOutputStream>()
        beforeTest { TestDescriptor td ->
            def tid = testId(td)
            def logFile = new File(
                    "${projectDir}/build/reports/testOutput/${tid}.test.stdout")
            logFile.parentFile.mkdirs()
            logFiles.put(tid, logFile)
            logStreams.put(tid, new FileOutputStream(logFile))
        }
        onOutput { TestDescriptor td, TestOutputEvent toe ->
            def tid = testId(td)
            // Some output can happen outside the context of a specific test (e.g. at the class level)
            // and beforeTest/afterTest seems to not be invoked for these cases (and similarly, there's
            // a TestDescriptor hierarchy that includes the thread executing the test, Gradle tasks,
            // etc). We see some of these in practice and it seems like something buggy in the Gradle
            // test runner since we see it *before* any tests and it is frequently not related to any
            // code in the test (best guess is that it is tail output from last test). We won't have
            // an output file for these, so simply ignore them. If they become critical for debugging,
            // they can be seen with showStandardStreams.
            if (td.name == td.className) {
                return
            }
            try {
                logStreams.get(tid).write(toe.message.getBytes(StandardCharsets.UTF_8))
            } catch (Exception e) {
                println "ERROR: Failed to write output for test ${tid}"
                e.printStackTrace()
            }
        }
        afterTest { TestDescriptor td, TestResult tr ->
            def tid = testId(td)
            try {
                logStreams.get(tid).close()
                if (tr.resultType != TestResult.ResultType.FAILURE) {
                    logFiles.get(tid).delete()
                } else {
                    def file = logFiles.get(tid)
                    println "${tid} failed, log available in ${file}"
                }
            } catch (Exception e) {
                println "ERROR: Failed to close stdout file for ${tid}"
                e.printStackTrace()
            } finally {
                logFiles.remove(tid)
                logStreams.remove(tid)
            }
        }
    }

    test {
        maxParallelForks = userMaxForks ?: Runtime.runtime.availableProcessors()

        minHeapSize = "256m"
        maxHeapSize = "2048m"

        testLogging {
            events = testLoggingEvents
            showStandardStreams = testShowStandardStreams
            exceptionFormat = testExceptionFormat
        }
        logTestStdout.rehydrate(delegate, owner, this)()
    }

    uploadArchives {
        repositories {
            // To test locally, replace mavenUrl in ~/.gradle/gradle.properties to file://localhost/tmp/myRepo/
            mavenDeployer {
                repository(url: "${mavenUrl}") {
                    authentication(userName: "${mavenUsername}", password: "${mavenPassword}")
                }
                afterEvaluate {
                    pom.project {
                        name 'Trogdor'
                        packaging 'jar'
                        url 'http://kafka.apache.org'
                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }
                    }
                }
            }
        }
    }

}
